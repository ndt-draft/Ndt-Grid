/**
 * Ndt Grid
 * Responsive grid system
 *
 * Base on 960.gs
 * http://960.gs
 * Thanks to fine work of Nathan Smith
 *
 * Modified by Thanh Nguyen Dac
 * Version: 0.1
 * Licensed under GPL and MIT
 */

/* 
 * Tablet of content
 * -----------------------------------------------------------------------------
 * 1.0 Base 960gs
 * 2.0 Reponsive Desktop
 * 3.0 Tablet
 * 4.0 Mobile
 * 5.0 Clearing
 */

// Defining number of columns in the grid.
// Common Values would be 12, 16 or 24
@maxGrid:12;
@gutterWidth: 40px;
@maxFixedWidth: 1000px;
@maxResponsiveWidth: 1120px;
@maxResponsiveLargeWidth: 1300px;
@maxTabletWidth:760px;
@maxMobileLargeWidth:478px;
@maxMobileSmallWidth:318px;

.container(){    
	clear:both;
	margin: 0 auto;
}         

.grid_unit() {
	display: inline;
	float: left;
	position: relative;
	margin-left: @gutterWidth;
}
                           
// Works out the width of elements based
// on total number of columns and width
// number of columns being displayed.
.grid(@cols:''){  
	@contentWidth: @maxFixedWidth - ( 2 * @gutterWidth );
	@single: (@contentWidth - (@gutterWidth * (@maxGrid - 1))) / @maxGrid;
	width:(@single * @cols) + (@gutterWidth * (@cols - 1));
}      

// Allows for padding before element
.prefix(@cols:''){
	@contentWidth: @maxFixedWidth - ( 2 * @gutterWidth );
	@single: (@contentWidth - (@gutterWidth * (@maxGrid - 1))) / @maxGrid;
	padding-left: (@single + @gutterWidth) * @cols;
}    
// Removes left margin
.alpha(){
	margin-left:0;
}

// Specific Definition

/* 
 * 1.0 Base 960gs
 * -----------------------------------------------------------------------------
 */
body { min-width: @maxFixedWidth - ( 2 * @gutterWidth ); }

.boxed { width: @maxFixedWidth; margin: 0 auto; }

.container { .container; .grid(12); }

.grid_1, .grid_2, .grid_3, .grid_4, .grid_5, .grid_6, .grid_7, .grid_8, .grid_9, .grid_10, .grid_11, .grid_12 {
	.grid_unit;
}

.alpha { .alpha; }

.grid_1  { .grid(1); }
.grid_2  { .grid(2); }
.grid_3  { .grid(3); }
.grid_4  { .grid(4); }
.grid_5  { .grid(5); }
.grid_6  { .grid(6); }
.grid_7  { .grid(7); }
.grid_8  { .grid(8); }
.grid_9  { .grid(9); }
.grid_10 { .grid(10); }
.grid_11 { .grid(11); }
.grid_12 { .grid(12); }

.prefix_1 { .prefix(1); }
.prefix_2 { .prefix(2); }
.prefix_3 { .prefix(3); }
.prefix_4 { .prefix(4); }
.prefix_5 { .prefix(5); }
.prefix_6 { .prefix(6); }
.prefix_7 { .prefix(7); }
.prefix_8 { .prefix(8); }
.prefix_9 { .prefix(9); }
.prefix_10 { .prefix(10); }
.prefix_11 { .prefix(11); }

/* 
 * 2.0 Reponsive
 * -----------------------------------------------------------------------------
 */
@media only screen and (min-width: 1160px) {
	.grid(@cols:''){  
		@contentWidth: @maxResponsiveWidth - ( 2 * @gutterWidth );
		@single: (@contentWidth - (@gutterWidth * (@maxGrid - 1))) / @maxGrid;
		width:(@single * @cols) + (@gutterWidth * (@cols - 1));
	}      

	// Allows for padding before element
	.prefix(@cols:''){
		@contentWidth: @maxResponsiveWidth - ( 2 * @gutterWidth );
		@single: (@contentWidth - (@gutterWidth * (@maxGrid - 1))) / @maxGrid;
		padding-left: (@single + @gutterWidth) * @cols;
	} 

	.responsive body { min-width: @maxResponsiveWidth - ( 2 * @gutterWidth ); }
	
	.responsive .boxed { width: @maxResponsiveWidth; }

	.responsive .container { .grid(12); }

	.responsive .grid_1  { .grid(1); }
	.responsive .grid_2  { .grid(2); }
	.responsive .grid_3  { .grid(3); }
	.responsive .grid_4  { .grid(4); }
	.responsive .grid_5  { .grid(5); }
	.responsive .grid_6  { .grid(6); }
	.responsive .grid_7  { .grid(7); }
	.responsive .grid_8  { .grid(8); }
	.responsive .grid_9  { .grid(9); }
	.responsive .grid_10 { .grid(10); }
	.responsive .grid_11 { .grid(11); }
	.responsive .grid_12 { .grid(12); }

	.responsive .prefix_1 { .prefix(1); }
	.responsive .prefix_2 { .prefix(2); }
	.responsive .prefix_3 { .prefix(3); }
	.responsive .prefix_4 { .prefix(4); }
	.responsive .prefix_5 { .prefix(5); }
	.responsive .prefix_6 { .prefix(6); }
	.responsive .prefix_7 { .prefix(7); }
	.responsive .prefix_8 { .prefix(8); }
	.responsive .prefix_9 { .prefix(9); }
	.responsive .prefix_10 { .prefix(10); }
	.responsive .prefix_11 { .prefix(11); }
}

@media only screen and (min-width: 1340px) {
	.grid(@cols:''){  
		@contentWidth: @maxResponsiveLargeWidth - ( 2 * @gutterWidth );
		@single: (@contentWidth - (@gutterWidth * (@maxGrid - 1))) / @maxGrid;
		width:(@single * @cols) + (@gutterWidth * (@cols - 1));
	}      

	// Allows for padding before element
	.prefix(@cols:''){
		@contentWidth: @maxResponsiveLargeWidth - ( 2 * @gutterWidth );
		@single: (@contentWidth - (@gutterWidth * (@maxGrid - 1))) / @maxGrid;
		padding-left: (@single + @gutterWidth) * @cols;
	} 

	.responsive_large body { min-width: @maxResponsiveLargeWidth - ( 2 * @gutterWidth ); }
	
	.responsive_large .boxed { width: @maxResponsiveLargeWidth; }

	.responsive_large .container { .grid(12); }

	.responsive_large .grid_1  { .grid(1); }
	.responsive_large .grid_2  { .grid(2); }
	.responsive_large .grid_3  { .grid(3); }
	.responsive_large .grid_4  { .grid(4); }
	.responsive_large .grid_5  { .grid(5); }
	.responsive_large .grid_6  { .grid(6); }
	.responsive_large .grid_7  { .grid(7); }
	.responsive_large .grid_8  { .grid(8); }
	.responsive_large .grid_9  { .grid(9); }
	.responsive_large .grid_10 { .grid(10); }
	.responsive_large .grid_11 { .grid(11); }
	.responsive_large .grid_12 { .grid(12); }

	.responsive_large .prefix_1 { .prefix(1); }
	.responsive_large .prefix_2 { .prefix(2); }
	.responsive_large .prefix_3 { .prefix(3); }
	.responsive_large .prefix_4 { .prefix(4); }
	.responsive_large .prefix_5 { .prefix(5); }
	.responsive_large .prefix_6 { .prefix(6); }
	.responsive_large .prefix_7 { .prefix(7); }
	.responsive_large .prefix_8 { .prefix(8); }
	.responsive_large .prefix_9 { .prefix(9); }
	.responsive_large .prefix_10 { .prefix(10); }
	.responsive_large .prefix_11 { .prefix(11); }
}

/* 
 * 3.0 Tablet
 * -----------------------------------------------------------------------------
 */
@media only screen and (min-width: 768px) and (max-width: 989px) {
	.grid(@cols:''){  
		@contentWidth: @maxTabletWidth - ( 2 * @gutterWidth );
		@single: (@contentWidth - (@gutterWidth * (@maxGrid - 1))) / @maxGrid;
		width:(@single * @cols) + (@gutterWidth * (@cols - 1));
	}
	
	// Allows for padding before element
	.prefix(@cols:''){
		@contentWidth: @maxTabletWidth - ( 2 * @gutterWidth );
		@single: (@contentWidth - (@gutterWidth * (@maxGrid - 1))) / @maxGrid;
		padding-left: (@single + @gutterWidth) * @cols;
	}

	.responsive body { min-width: @maxTabletWidth - ( 2 * @gutterWidth ); }
	
	.responsive .boxed { width: @maxTabletWidth; }

	.responsive .container { .grid(12); }

	.responsive .grid_1  { .grid(1); }
	.responsive .grid_2  { .grid(2); }
	.responsive .grid_3  { .grid(3); }
	.responsive .grid_4  { .grid(4); }
	.responsive .grid_5  { .grid(5); }
	.responsive .grid_6  { .grid(6); }
	.responsive .grid_7  { .grid(7); }
	.responsive .grid_8  { .grid(8); }
	.responsive .grid_9  { .grid(9); }
	.responsive .grid_10 { .grid(10); }
	.responsive .grid_11 { .grid(11); }
	.responsive .grid_12 { .grid(12); }

	.responsive .prefix_1 { .prefix(1); }
	.responsive .prefix_2 { .prefix(2); }
	.responsive .prefix_3 { .prefix(3); }
	.responsive .prefix_4 { .prefix(4); }
	.responsive .prefix_5 { .prefix(5); }
	.responsive .prefix_6 { .prefix(6); }
	.responsive .prefix_7 { .prefix(7); }
	.responsive .prefix_8 { .prefix(8); }
	.responsive .prefix_9 { .prefix(9); }
	.responsive .prefix_10 { .prefix(10); }
	.responsive .prefix_11 { .prefix(11); }
}

/* 
 * 4.0 Mobile
 * -----------------------------------------------------------------------------
 */
@media only screen and (max-width: 767px) {
	@contentWidth: @maxMobileSmallWidth - @gutterWidth;

	.responsive body { min-width: @contentWidth }

	.responsive .boxed { width: @maxMobileSmallWidth; }

	.responsive .container { width: @contentWidth; }

	.responsive .grid_1,
	.responsive .grid_2,
	.responsive .grid_3,
	.responsive .grid_4,
	.responsive .grid_5,
	.responsive .grid_6,
	.responsive .grid_7,
	.responsive .grid_8,
	.responsive .grid_9,
	.responsive .grid_10,
	.responsive .grid_11,
	.responsive .grid_12 {
		margin: 0;
		margin-bottom: 20px;
		width: 100%;
	}

	.responsive .prefix_1,
	.responsive .prefix_2,
	.responsive .prefix_3,
	.responsive .prefix_4,
	.responsive .prefix_5,
	.responsive .prefix_6,
	.responsive .prefix_7,
	.responsive .prefix_8,
	.responsive .prefix_9,
	.responsive .prefix_10,
	.responsive .prefix_11 {
		padding-left: 0;
	}
}

@media only screen and (min-width: 480px) and (max-width: 767px) {
	@contentWidth: @maxMobileLargeWidth - @gutterWidth;

	.responsive body { min-width: @contentWidth }

	.responsive .boxed { width: @maxMobileLargeWidth; }

	.responsive .container { width: @contentWidth; }
}

/* 
 * 5.0 Clearing
 * -----------------------------------------------------------------------------
 */
/* `Clear Floated Elements
----------------------------------------------------------------------------------------------------*/

/* http://sonspring.com/journal/clearing-floats */

.clear {
	clear: both;
	display: block;
	overflow: hidden;
	visibility: hidden;
	width: 0;
	height: 0;
}

/* http://www.yuiblog.com/blog/2010/09/27/clearfix-reloaded-overflowhidden-demystified */

.clearfix:before,
.clearfix:after {
	content: '\0020';
	display: block;
	overflow: hidden;
	visibility: hidden;
	width: 0;
	height: 0;
}

.clearfix:after {
	clear: both;
}

/*
  The following zoom:1 rule is specifically for IE6 + IE7.
  Move to separate stylesheet if invalid CSS is a problem.
*/

.clearfix {
	zoom: 1;
}

